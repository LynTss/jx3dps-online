{"version":3,"file":"static/js/main~a2dee9c7.60dbecaa.js","mappings":"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","sources":["功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/components/SaveCustomCycleModal/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/components/StatusBar/buff/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/components/StatusBar/dpsRes/components/BattleLogModal.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/components/StatusBar/dpsRes/components/BuffCountModal/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/components/SaveCustomCycleModal/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/components/StatusBar/buff/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/components/StatusBar/chongwu/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/components/StatusBar/dpsRes/components/BattleLogModal.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/components/StatusBar/dpsRes/components/BuffCountModal/index.tsx"],"sourcesContent":["import { Alert, Checkbox, Form, Input, Modal, Select, Tabs } from 'antd'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport { 延迟设定 } from '@/数据/常量'\nimport './index.css'\n\nconst { 计算循环 } = 获取当前数据()\n\ninterface SaveCustomCycleModalProps {\n  自定义循环保存弹窗: boolean\n  设置自定义循环保存弹窗: (e: boolean) => void\n  保存自定义循环: (名称, 加速选项, 延迟选项) => void\n}\n\nfunction SaveCustomCycleModal(props: SaveCustomCycleModalProps) {\n  const { 自定义循环保存弹窗, 设置自定义循环保存弹窗, 保存自定义循环 } = props\n  // 保存类型，覆盖｜新增\n  const [自定义循环类型, 设置自定义循环类型] = useState<string>()\n  // 自定义循环名称保存输入\n  const [自定义循环名称输入, 设置自定义循环名称输入] = useState<string>()\n  // 保存类型，覆盖｜新增\n  const [覆盖循环名, 设置覆盖循环名] = useState<string>()\n  // 保存加速序列\n  const [加速选项, 设置加速选项] = useState<number[]>([0, 1, 2])\n  const [延迟选项, 设置延迟选项] = useState<number[]>([0, 1, 2])\n\n  const 自定义循环 = useAppSelector((state) => state?.data?.自定义循环列表)\n\n  const dispatch = useAppDispatch()\n\n  const 全部循环 = useMemo(() => {\n    return (计算循环 || []).concat(自定义循环)\n  }, [自定义循环, 计算循环])\n\n  useEffect(() => {\n    if (自定义循环保存弹窗) {\n      if (自定义循环?.length) {\n        设置自定义循环类型('覆盖')\n      } else {\n        设置自定义循环类型('新增')\n      }\n    } else {\n      设置自定义循环类型(undefined)\n      设置自定义循环名称输入(undefined)\n      设置覆盖循环名(undefined)\n    }\n  }, [自定义循环保存弹窗, 自定义循环])\n\n  const 保存自定义循环前 = () => {\n    const 名称 = 自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入\n    保存自定义循环(名称, 加速选项, 延迟选项)\n  }\n\n  // 删除自定义循环\n  const 删除循环前提示 = (e, 名称) => {\n    e.stopPropagation()\n    e.preventDefault()\n\n    Modal.confirm({\n      title: `确定要删除循环【${名称}】吗?`,\n      content: '删除后将无法恢复',\n      okText: '我要删除',\n      onOk: async () => {\n        删除循环(名称)\n      },\n    })\n  }\n\n  const 删除循环 = (名称) => {\n    dispatch(更新当前自定义循环列表(自定义循环.filter((item) => item.名称 !== 名称)))\n  }\n\n  return (\n    <Modal\n      centered\n      title='保存自定义循环'\n      okButtonProps={{\n        disabled: !(自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入),\n      }}\n      open={自定义循环保存弹窗}\n      onCancel={() => 设置自定义循环保存弹窗(false)}\n      onOk={保存自定义循环前}\n      width={630}\n      destroyOnClose\n      className={'cycle-custom-save-modal'}\n    >\n      <Tabs\n        className={'cycle-custom-save-modal-content'}\n        type='card'\n        activeKey={自定义循环类型}\n        onChange={设置自定义循环类型}\n      >\n        <Tabs.TabPane tab={'覆盖'} key='覆盖'>\n          <Select\n            value={覆盖循环名}\n            onChange={设置覆盖循环名}\n            optionLabelProp='label'\n            placeholder={'请选择你要覆盖的循环'}\n          >\n            {自定义循环.map((item) => {\n              return (\n                <Select.Option value={item.名称} key={item.名称} label={item.名称}>\n                  <div className={'cycle-custom-save-label'}>\n                    <span>{item.名称}</span>\n                    <span\n                      onClick={(e) => 删除循环前提示(e, item.名称)}\n                      className={'cycle-custom-save-delete'}\n                    >\n                      删除\n                    </span>\n                  </div>\n                </Select.Option>\n              )\n            })}\n          </Select>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={'新增'} key='新增'>\n          <Form>\n            <Form.Item\n              rules={[\n                {\n                  validator: (_, value, callback) => {\n                    if (value) {\n                      if (全部循环?.some((item) => item?.名称 === value)) {\n                        callback('已存在相同的循环名，请更换')\n                      }\n                    }\n                    callback()\n                  },\n                },\n              ]}\n            >\n              <Input\n                value={自定义循环名称输入}\n                placeholder='请输入自定义循环名称'\n                onChange={(e) => 设置自定义循环名称输入(e?.target?.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Tabs.TabPane>\n      </Tabs>\n      <div className='cycle-custom-save-checkbox'>\n        <p>加速</p>\n        <Checkbox.Group value={加速选项} onChange={(e) => 设置加速选项(e as number[])}>\n          {Array.from({ length: 6 }, (v, i) => i).map((a) => {\n            return (\n              <Checkbox value={a} key={a}>\n                {a}段\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n        <p>延迟</p>\n        <Checkbox.Group value={延迟选项} onChange={(e) => 设置延迟选项(e as number[])}>\n          {延迟设定.map((item) => {\n            return (\n              <Checkbox value={item.value} key={item.value}>\n                {item.label}\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n      </div>\n      <Alert message={'选项越少保存越快。没选择的选项在外部计算dps时不会进行计算。'} />\n    </Modal>\n  )\n}\n\nexport default SaveCustomCycleModal\n","import React from 'react'\n\nimport { Space, Tooltip } from 'antd'\nimport { Buff枚举 } from '../../../simulator/type'\nimport { 每秒郭氏帧 } from '../../../constant'\nimport './index.css'\n\ninterface BuffProps {\n  title: string\n  buff列表: Buff枚举\n  当前时间点: number\n}\n\nfunction Buff(props: BuffProps) {\n  const { title, buff列表, 当前时间点 } = props\n\n  const 当前buff列表 = Object.keys(buff列表).map((item) => buff列表[item])\n\n  return (\n    <div className={'cycle-status-bar-content cycle-status-bar-buff-content'}>\n      <div className={'cycle-status-bar-title'}>{title}</div>\n      <Space className={'cycle-status-bar-buff-list'} size={[8, 8]} wrap>\n        {当前buff列表?.length ? (\n          当前buff列表.map((item) => {\n            const 应该消失时间 = (item.刷新时间 || 0) + (item.最大持续时间 || 0)\n            const 剩余时间 = 应该消失时间 - 当前时间点 || 0\n            const 剩余时间秒 = (剩余时间 / 每秒郭氏帧).toFixed(1)\n            const 层数 = item.当前层数 || 0\n            return (\n              <div className={'cycle-status-bar-buff'} key={item.名称}>\n                <div className={'cycle-status-bar-buff-item'}>\n                  <Tooltip\n                    title={\n                      item.名称 === '流岚' ? (\n                        <>\n                          {item.名称}\n                          {((层数 - 1) * 20 + 剩余时间 / 每秒郭氏帧).toFixed(1)}秒\n                        </>\n                      ) : (\n                        <>{`${item.名称}${层数 > 1 ? `${层数}层` : ''}`}</>\n                      )\n                    }\n                  >\n                    <img className={'cycle-status-bar-buff-img'} src={item.图标} />\n                  </Tooltip>\n                  {层数 > 1 ? (\n                    <span className={'cycle-status-bar-buff-count'}>{item.当前层数}</span>\n                  ) : null}\n                </div>\n                <p\n                  className={`cycle-status-bar-buff-second ${\n                    剩余时间 < 每秒郭氏帧 * 2 ? 'cycle-status-bar-buff-second-limit' : ''\n                  }`}\n                >\n                  {剩余时间秒}\n                </p>\n              </div>\n            )\n          })\n        ) : (\n          <p className={'cycle-buff-empty'}>无</p>\n        )}\n      </Space>\n    </div>\n  )\n}\n\nexport default Buff\n","import React from 'react'\nimport { Modal, ModalProps, Table } from 'antd'\nimport 循环模拟技能基础数据, { 日志类型数组 } from '../../../../constant/skill'\nimport { 每秒郭氏帧 } from '../../../../constant'\nimport { 循环日志数据类型 } from '../../../../simulator/type'\nimport '../../../../index.css'\n\ninterface BattleLogModalProps extends ModalProps {\n  logData: 循环日志数据类型[]\n}\n\nconst BattleLogModal: React.FC<BattleLogModalProps> = (props) => {\n  const { open, onCancel, logData } = props\n\n  const columns = [\n    {\n      title: '日志',\n      dataIndex: '日志',\n      filters: [...循环模拟技能基础数据, { 技能名称: '流血' }, { 技能名称: '斩浪破锋' }]?.map(\n        (item) => {\n          return {\n            text: item?.技能名称,\n            value: item?.技能名称,\n          }\n        }\n      ),\n      onFilter: (value: any, record) => {\n        return record.日志?.includes(value) || record?.日志类型?.includes(value)\n      },\n    },\n    {\n      title: '日志类型',\n      dataIndex: '日志类型',\n      filters: 日志类型数组?.map((item) => {\n        return {\n          text: item,\n          value: item,\n        }\n      }),\n      onFilter: (value: any, record) => record.日志类型.indexOf(value) === 0,\n    },\n    {\n      title: '伤害次数',\n      dataIndex: '伤害次数',\n      render: (_, row) => {\n        return row?.其他数据?.伤害次数 || ''\n      },\n    },\n    {\n      title: 'buff列表',\n      dataIndex: 'buff列表',\n      render: (_, record) => {\n        return record.日志类型 === '造成伤害' ? (_ || [])?.join(',') || '-' : '-'\n      },\n    },\n    {\n      title: '日志帧',\n      dataIndex: '日志时间',\n      render: (_) => {\n        return _\n      },\n    },\n    {\n      title: '日志秒',\n      dataIndex: '日志秒',\n      render: (_, row) => {\n        return row?.日志时间 / 每秒郭氏帧\n      },\n    },\n    // {\n    //   title: '造成伤害',\n    //   dataIndex: '造成伤害',\n    // },\n    // {\n    //   title: '造成总伤害',\n    //   dataIndex: '造成总伤害',\n    // },\n    // {\n    //   title: '秒伤',\n    //   dataIndex: '秒伤',\n    // },\n  ]\n\n  return (\n    <Modal\n      className='cycle-simulator-modal'\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>战斗日志</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Table\n        dataSource={logData}\n        columns={columns}\n        size='small'\n        pagination={{ pageSize: 100, showTotal: (total) => total }}\n      />\n    </Modal>\n  )\n}\n\nexport default BattleLogModal\n","import { Modal, ModalProps, Space } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Chart } from '@antv/g2'\nimport { 循环日志数据类型 } from '../../../../../simulator/type'\nimport './index.css'\nimport { 格式化buff覆盖数组, 获取Buff覆盖率 } from './util'\n\ninterface BuffCountModalProps extends ModalProps {\n  open: boolean\n  onCancel: () => void\n  日志: 循环日志数据类型[]\n  总战斗用时: number // 总战斗用时\n}\n\nfunction BuffCountModal(props: BuffCountModalProps) {\n  const { open, onCancel, 日志, 总战斗用时 } = props\n  const [chartData, setChartData] = useState<any>()\n  const limitRef: any = useRef<any>()\n  const [覆盖率, 设置覆盖率] = useState<any>({})\n\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => {\n        initChart()\n      }, 20)\n    }\n    if (open) {\n      limitRef.current = false\n    } else {\n      limitRef.current = false\n      设置覆盖率({})\n      setChartData(undefined)\n    }\n  }, [open, 日志, 总战斗用时])\n\n  const initChart = () => {\n    if (limitRef.current) {\n      return\n    }\n    limitRef.current = true\n\n    const chart = chartData\n      ? chartData\n      : new Chart({\n          container: 'cycle-buff-count-chart',\n          autoFit: true,\n          renderer: 'canvas',\n          padding: [24, 120, 100, 120],\n        })\n\n    chart.tooltip({\n      crosshairs: false,\n    })\n\n    if (!chartData) {\n      setChartData(chart)\n    }\n\n    const dataSource = getDataSource()\n\n    chart.source(dataSource, {\n      time: {\n        tickCount: 10,\n      },\n    })\n    chart.axis('time', {\n      label: {\n        style: {\n          textAlign: 'center', // 文本对齐方向，可取值为： start middle end\n          fontSize: 16, // 文本大小\n        },\n      },\n    })\n\n    const data = getDataSource()\n\n    chart.data(data)\n    chart.coordinate().transpose()\n    chart.interval().position('type*range').color('type').label('range', { offset: 10 })\n    // .color(DOMAIN_COLOR)\n    chart.render()\n    // setLoading(false)\n\n    setTimeout(() => {\n      limitRef.current = false\n    }, 10)\n  }\n\n  const getDataSource = () => {\n    const { Buff枚举, 覆盖率 } = 获取Buff覆盖率(日志, 总战斗用时)\n    设置覆盖率(覆盖率)\n    return 格式化buff覆盖数组(Buff枚举)\n  }\n\n  return (\n    <Modal\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>Buff覆盖情况（时间单位：帧）</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Space className='cycle-buff-count-text' size={[16, 16]} wrap>\n        {Object.keys(覆盖率).map((item) => {\n          return (\n            <div key={item} className={'cycle-buff-count-text-wrap'}>\n              <span className='cycle-buff-count-text-label'>{item}：</span>\n              <span className='cycle-buff-count-text-value'>{覆盖率[item]}%</span>\n            </div>\n          )\n        })}\n      </Space>\n      {open ? <div id='cycle-buff-count-chart' className={'cycle-buff-count-chart'} /> : null}\n    </Modal>\n  )\n}\n\nexport default BuffCountModal\n","import { Alert, Checkbox, Form, Input, Modal, Select, Tabs } from 'antd'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport { 延迟设定 } from '@/数据/常量'\nimport './index.css'\n\nconst { 计算循环 } = 获取当前数据()\n\ninterface SaveCustomCycleModalProps {\n  自定义循环保存弹窗: boolean\n  设置自定义循环保存弹窗: (e: boolean) => void\n  保存自定义循环: (名称, 加速选项, 延迟选项) => void\n}\n\nfunction SaveCustomCycleModal(props: SaveCustomCycleModalProps) {\n  const { 自定义循环保存弹窗, 设置自定义循环保存弹窗, 保存自定义循环 } = props\n  // 保存类型，覆盖｜新增\n  const [自定义循环类型, 设置自定义循环类型] = useState<string>()\n  // 自定义循环名称保存输入\n  const [自定义循环名称输入, 设置自定义循环名称输入] = useState<string>()\n  // 保存类型，覆盖｜新增\n  const [覆盖循环名, 设置覆盖循环名] = useState<string>()\n  // 保存加速序列\n  const [加速选项, 设置加速选项] = useState<number[]>([0, 1, 2])\n  const [延迟选项, 设置延迟选项] = useState<number[]>([0, 1, 2])\n\n  const 自定义循环 = useAppSelector((state) => state?.data?.自定义循环列表)\n\n  const dispatch = useAppDispatch()\n\n  const 全部循环 = useMemo(() => {\n    return (计算循环 || []).concat(自定义循环)\n  }, [自定义循环, 计算循环])\n\n  useEffect(() => {\n    if (自定义循环保存弹窗) {\n      if (自定义循环?.length) {\n        设置自定义循环类型('覆盖')\n      } else {\n        设置自定义循环类型('新增')\n      }\n    } else {\n      设置自定义循环类型(undefined)\n      设置自定义循环名称输入(undefined)\n      设置覆盖循环名(undefined)\n    }\n  }, [自定义循环保存弹窗, 自定义循环])\n\n  const 保存自定义循环前 = () => {\n    const 名称 = 自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入\n    保存自定义循环(名称, 加速选项, 延迟选项)\n  }\n\n  // 删除自定义循环\n  const 删除循环前提示 = (e, 名称) => {\n    e.stopPropagation()\n    e.preventDefault()\n\n    Modal.confirm({\n      title: `确定要删除循环【${名称}】吗?`,\n      content: '删除后将无法恢复',\n      okText: '我要删除',\n      onOk: async () => {\n        删除循环(名称)\n      },\n    })\n  }\n\n  const 删除循环 = (名称) => {\n    dispatch(更新当前自定义循环列表(自定义循环.filter((item) => item.名称 !== 名称)))\n  }\n\n  return (\n    <Modal\n      centered\n      title='保存自定义循环'\n      okButtonProps={{\n        disabled:\n          !(自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入) ||\n          !延迟选项?.length ||\n          !加速选项?.length,\n      }}\n      open={自定义循环保存弹窗}\n      onCancel={() => 设置自定义循环保存弹窗(false)}\n      onOk={保存自定义循环前}\n      width={630}\n      destroyOnClose\n      className={'cycle-custom-save-modal'}\n    >\n      <Tabs\n        className={'cycle-custom-save-modal-content'}\n        type='card'\n        activeKey={自定义循环类型}\n        onChange={设置自定义循环类型}\n      >\n        <Tabs.TabPane tab={'覆盖'} key='覆盖'>\n          <Select\n            value={覆盖循环名}\n            onChange={设置覆盖循环名}\n            optionLabelProp='label'\n            placeholder={'请选择你要覆盖的循环'}\n          >\n            {自定义循环.map((item) => {\n              return (\n                <Select.Option value={item.名称} key={item.名称} label={item.名称}>\n                  <div className={'cycle-custom-save-label'}>\n                    <span>{item.名称}</span>\n                    <span\n                      onClick={(e) => 删除循环前提示(e, item.名称)}\n                      className={'cycle-custom-save-delete'}\n                    >\n                      删除\n                    </span>\n                  </div>\n                </Select.Option>\n              )\n            })}\n          </Select>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={'新增'} key='新增'>\n          <Form>\n            <Form.Item\n              rules={[\n                {\n                  validator: (_, value, callback) => {\n                    if (value) {\n                      if (全部循环?.some((item) => item?.名称 === value)) {\n                        callback('已存在相同的循环名，请更换')\n                      }\n                    }\n                    callback()\n                  },\n                },\n              ]}\n            >\n              <Input\n                value={自定义循环名称输入}\n                placeholder='请输入自定义循环名称'\n                onChange={(e) => 设置自定义循环名称输入(e?.target?.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Tabs.TabPane>\n      </Tabs>\n      <div className='cycle-custom-save-checkbox'>\n        <p>加速</p>\n        <Checkbox.Group value={加速选项} onChange={(e) => 设置加速选项(e as number[])}>\n          {Array.from({ length: 6 }, (v, i) => i).map((a) => {\n            return (\n              <Checkbox value={a} key={a}>\n                {a}段\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n        <p>延迟</p>\n        <Checkbox.Group value={延迟选项} onChange={(e) => 设置延迟选项(e as number[])}>\n          {延迟设定.map((item) => {\n            return (\n              <Checkbox value={item.value} key={item.value}>\n                {item.label}\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n      </div>\n      <Alert message={'选项越少保存越快。没选择的选项在外部计算dps时不会进行计算。'} />\n    </Modal>\n  )\n}\n\nexport default SaveCustomCycleModal\n","import React, { useMemo } from 'react'\n\nimport { Space, Tooltip } from 'antd'\nimport { Buff枚举, DOT列表 } from '../../../simulator/type'\nimport { 每秒郭氏帧 } from '../../../constant'\nimport { 原始Buff数据 } from '../../../constant/skill'\nimport './index.css'\n\ninterface BuffProps {\n  title: string\n  buff列表: Buff枚举\n  DOT列表?: DOT列表\n  当前时间点: number\n  奇穴信息?: string[]\n}\n\nfunction Buff(props: BuffProps) {\n  const { title, buff列表, DOT列表 = {}, 奇穴信息, 当前时间点 } = props\n\n  const 当前buff列表 = Object.keys(buff列表).map((item) => buff列表[item])\n  const 最终显示buff列表 = useMemo(() => {\n    const res = [...(当前buff列表 || [])]\n    // 判断诸怀\n    if (奇穴信息?.includes('诸怀') && buff列表?.['承契']?.当前层数) {\n      res.push(原始Buff数据?.['诸怀'])\n    }\n    return res\n  }, [当前buff列表, buff列表, 奇穴信息])\n  const 当前Dot列表 = Object.keys(DOT列表)\n    .map((item) => {\n      const 原始数据 = 原始Buff数据?.[item]\n      return {\n        ...DOT列表[item],\n        ...原始数据,\n      }\n    })\n    ?.filter((item) => item?.待生效数据?.length)\n\n  return (\n    <div className={'cycle-status-bar-content cycle-status-bar-buff-content'}>\n      <div className={'cycle-status-bar-title'}>{title}</div>\n      <Space className={'cycle-status-bar-buff-list'} size={[8, 8]} wrap>\n        {最终显示buff列表?.length\n          ? 最终显示buff列表.map((item) => {\n              const 应该消失时间 = (item.刷新时间 || 0) + (item.最大持续时间 || 0)\n              const 剩余时间 = 应该消失时间 - 当前时间点 || 0\n              const 剩余时间秒 = (剩余时间 / 每秒郭氏帧).toFixed(1)\n              const 层数 = item.当前层数 || 0\n              return (\n                <div className={'cycle-status-bar-buff'} key={item.名称}>\n                  <div className={'cycle-status-bar-buff-item'}>\n                    <Tooltip\n                      title={\n                        <div>\n                          <>{`${item.名称}${层数 > 1 ? `${层数}层` : ''}`}</>\n                          <p>{item.备注}</p>\n                        </div>\n                      }\n                    >\n                      <img className={'cycle-status-bar-buff-img'} src={item.图标} />\n                    </Tooltip>\n                    {层数 > 1 ? (\n                      <span className={'cycle-status-bar-buff-count'}>{item.当前层数}</span>\n                    ) : null}\n                  </div>\n                  <p\n                    className={`cycle-status-bar-buff-second ${\n                      剩余时间 < 每秒郭氏帧 * 2 ? 'cycle-status-bar-buff-second-limit' : ''\n                    }`}\n                  >\n                    {+剩余时间秒 >= 0 ? 剩余时间秒 : null}\n                  </p>\n                </div>\n              )\n            })\n          : null}\n        {当前Dot列表?.length\n          ? 当前Dot列表.map((item) => {\n              const 最后一跳 = item.待生效数据?.[item.待生效数据.length - 1] || {}\n              const 应该消失时间 = 最后一跳?.生效时间 || 0\n              const 剩余时间 = 应该消失时间 - 当前时间点 || 0\n              const 剩余时间秒 = (剩余时间 / 每秒郭氏帧).toFixed(1)\n              const 层数 = 最后一跳.当前层数 || 0\n              return (\n                <div className={'cycle-status-bar-buff'} key={item.名称}>\n                  <div className={'cycle-status-bar-buff-item'}>\n                    <Tooltip\n                      title={\n                        <div>\n                          <p>{`${item.名称}${层数 > 1 ? `${层数}层` : ''}`}</p>\n                          <p>{item.备注}</p>\n                        </div>\n                      }\n                    >\n                      <img className={'cycle-status-bar-buff-img'} src={item.图标} />\n                    </Tooltip>\n                    {层数 > 1 ? (\n                      <span className={'cycle-status-bar-buff-count'}>{层数}</span>\n                    ) : null}\n                  </div>\n                  <p\n                    className={`cycle-status-bar-buff-second ${\n                      剩余时间 < 每秒郭氏帧 * 2 ? 'cycle-status-bar-buff-second-limit' : ''\n                    }`}\n                  >\n                    {剩余时间秒}\n                  </p>\n                </div>\n              )\n            })\n          : null}\n        {!当前buff列表?.length && !当前Dot列表?.length ? (\n          <p className={'cycle-buff-empty'}>无</p>\n        ) : null}\n      </Space>\n    </div>\n  )\n}\n\nexport default Buff\n","import React, { useMemo } from 'react'\nimport { 宠物数据, 当前宠物数据 } from '../../../simulator/type'\n\nimport { Space, Tooltip } from 'antd'\nimport { 每秒郭氏帧 } from '../../../constant'\nimport { 宠物基础数据 } from '../../../constant/skill'\nimport './index.css'\n\ninterface TitaiProps {\n  当前宠物数据: 当前宠物数据\n  当前时间点: number\n}\n\nfunction Chongwu(props: TitaiProps) {\n  const { 当前宠物数据, 当前时间点 } = props\n\n  const 当前宠物列表: 宠物数据[] = useMemo(() => {\n    return Object.keys(当前宠物数据)\n      .map((key) => {\n        const 数据 = 当前宠物数据[key]\n        if (数据) {\n          return 数据?.入场时间 <= 当前时间点 && 数据?.离场时间 > 当前时间点 ? 数据 : false\n        } else {\n          return false as any\n        }\n      })\n      .filter((item) => item)\n  }, [当前宠物数据, 当前时间点])\n\n  return (\n    <div className={'cycle-status-bar-content'}>\n      <div className={'cycle-status-bar-title'}>宠物</div>\n      <Space className={'cycle-status-bar-buff-list-chongwu'} size={[8, 8]} wrap>\n        {当前宠物列表?.length ? (\n          当前宠物列表.map((item) => {\n            const 剩余时间 = item.离场时间 - 当前时间点 || 0\n            const 剩余时间秒 = (剩余时间 / 每秒郭氏帧).toFixed(1)\n            const 宠物原始数据 = 宠物基础数据?.[item.宠物]\n            return (\n              <div className={'cycle-status-bar-buff'} key={item.宠物}>\n                <div className={'cycle-status-bar-buff-item'}>\n                  <Tooltip title={item.宠物}>\n                    <img className={'cycle-status-bar-buff-img'} src={宠物原始数据.图标} />\n                  </Tooltip>\n                </div>\n                <p\n                  className={`cycle-status-bar-buff-second ${\n                    剩余时间 < 每秒郭氏帧 * 2 ? 'cycle-status-bar-buff-second-limit' : ''\n                  }`}\n                >\n                  {剩余时间秒}\n                </p>\n              </div>\n            )\n          })\n        ) : (\n          <p className={'cycle-buff-empty'}>无</p>\n        )}\n      </Space>\n    </div>\n  )\n}\n\nexport default Chongwu\n","import React from 'react'\nimport { Modal, ModalProps, Table } from 'antd'\nimport 循环模拟技能基础数据, { 日志类型数组 } from '../../../../constant/skill'\nimport { 每秒郭氏帧 } from '../../../../constant'\nimport { 循环日志数据类型 } from '../../../../simulator/type'\nimport '../../../../index.css'\n\ninterface BattleLogModalProps extends ModalProps {\n  logData: 循环日志数据类型[]\n}\n\nconst BattleLogModal: React.FC<BattleLogModalProps> = (props) => {\n  const { open, onCancel, logData } = props\n\n  const columns = [\n    {\n      title: '日志',\n      dataIndex: '日志',\n      filters: [\n        ...循环模拟技能基础数据,\n        { 技能名称: '贯穿' },\n        { 技能名称: '标鹄' },\n        { 技能名称: '引爆' },\n        { 技能名称: '没石饮羽' },\n      ]?.map((item) => {\n        return {\n          text: item?.技能名称,\n          value: item?.技能名称,\n        }\n      }),\n      onFilter: (value: any, record) => {\n        return record.日志?.includes(value) || record?.日志类型?.includes(value)\n      },\n    },\n    {\n      title: '日志类型',\n      dataIndex: '日志类型',\n      filters: 日志类型数组?.map((item) => {\n        return {\n          text: item,\n          value: item,\n        }\n      }),\n      onFilter: (value: any, record) => record.日志类型.indexOf(value) === 0,\n    },\n    {\n      title: 'buff列表',\n      dataIndex: 'buff列表',\n      render: (_, record) => {\n        return record.日志类型 === '造成伤害' ? (_ || [])?.join(',') || '-' : '-'\n      },\n    },\n    {\n      title: '日志帧',\n      dataIndex: '日志时间',\n      render: (_) => {\n        return _\n      },\n    },\n    {\n      title: '日志秒',\n      dataIndex: '日志秒',\n      render: (_, row) => {\n        return row?.日志时间 / 每秒郭氏帧\n      },\n    },\n    // {\n    //   title: '造成伤害',\n    //   dataIndex: '造成伤害',\n    // },\n    // {\n    //   title: '造成总伤害',\n    //   dataIndex: '造成总伤害',\n    // },\n    // {\n    //   title: '秒伤',\n    //   dataIndex: '秒伤',\n    // },\n  ]\n\n  return (\n    <Modal\n      className='cycle-simulator-modal'\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>战斗日志</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Table\n        dataSource={logData}\n        columns={columns}\n        size='small'\n        pagination={{ pageSize: 100, showTotal: (total) => total }}\n      />\n    </Modal>\n  )\n}\n\nexport default BattleLogModal\n","import { Modal, ModalProps, Space } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Chart } from '@antv/g2'\nimport { 循环日志数据类型 } from '../../../../../simulator/type'\nimport './index.css'\nimport { 格式化buff覆盖数组, 获取Buff覆盖率 } from './util'\n\ninterface BuffCountModalProps extends ModalProps {\n  open: boolean\n  onCancel: () => void\n  日志: 循环日志数据类型[]\n  总战斗用时: number // 总战斗用时\n}\n\nfunction BuffCountModal(props: BuffCountModalProps) {\n  const { open, onCancel, 日志, 总战斗用时 } = props\n  const [chartData, setChartData] = useState<any>()\n  const limitRef: any = useRef<any>()\n  const [覆盖率, 设置覆盖率] = useState<any>({})\n\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => {\n        initChart()\n      }, 20)\n    }\n    if (open) {\n      limitRef.current = false\n    } else {\n      limitRef.current = false\n      设置覆盖率({})\n      setChartData(undefined)\n    }\n  }, [open, 日志, 总战斗用时])\n\n  const initChart = () => {\n    if (limitRef.current) {\n      return\n    }\n    limitRef.current = true\n\n    const chart = chartData\n      ? chartData\n      : new Chart({\n          container: 'cycle-buff-count-chart',\n          autoFit: true,\n          renderer: 'canvas',\n          padding: [24, 120, 100, 120],\n        })\n\n    chart.tooltip({\n      crosshairs: false,\n    })\n\n    if (!chartData) {\n      setChartData(chart)\n    }\n\n    const dataSource = getDataSource()\n\n    chart.source(dataSource, {\n      time: {\n        tickCount: 10,\n      },\n    })\n    chart.axis('time', {\n      label: {\n        style: {\n          textAlign: 'center', // 文本对齐方向，可取值为： start middle end\n          fontSize: 16, // 文本大小\n        },\n      },\n    })\n\n    const data = getDataSource()\n\n    chart.data(data)\n    chart.coordinate().transpose()\n    chart.interval().position('type*range').color('type').label('range', { offset: 10 })\n    // .color(DOMAIN_COLOR)\n    chart.render()\n    // setLoading(false)\n\n    setTimeout(() => {\n      limitRef.current = false\n    }, 10)\n  }\n\n  const getDataSource = () => {\n    const { Buff枚举, 覆盖率 } = 获取Buff覆盖率(日志, 总战斗用时)\n    设置覆盖率(覆盖率)\n    return 格式化buff覆盖数组(Buff枚举)\n  }\n\n  return (\n    <Modal\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>Buff覆盖情况（时间单位：帧）</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Space className='cycle-buff-count-text' size={[16, 16]} wrap>\n        {Object.keys(覆盖率).map((item) => {\n          return (\n            <div key={item} className={'cycle-buff-count-text-wrap'}>\n              <span className='cycle-buff-count-text-label'>{item}：</span>\n              <span className='cycle-buff-count-text-value'>{覆盖率[item]}%</span>\n            </div>\n          )\n        })}\n      </Space>\n      {open ? <div id='cycle-buff-count-chart' className={'cycle-buff-count-chart'} /> : null}\n    </Modal>\n  )\n}\n\nexport default BuffCountModal\n"],"names":["计算循环","获取当前数据","props","自定义循环保存弹窗","设置自定义循环保存弹窗","保存自定义循环","useState","自定义循环类型","设置自定义循环类型","自定义循环名称输入","设置自定义循环名称输入","覆盖循环名","设置覆盖循环名","加速选项","设置加速选项","延迟选项","设置延迟选项","自定义循环","useAppSelector","state","data","自定义循环列表","dispatch","useAppDispatch","全部循环","useMemo","concat","useEffect","length","undefined","删除循环","名称","更新当前自定义循环列表","filter","item","centered","title","okButtonProps","disabled","open","onCancel","onOk","width","destroyOnClose","className","type","activeKey","onChange","tab","value","optionLabelProp","placeholder","map","label","onClick","e","stopPropagation","preventDefault","Modal","content","okText","删除循环前提示","rules","validator","_","callback","some","target","Array","from","v","i","a","延迟设定","message","buff列表","当前时间点","当前buff列表","Object","keys","size","wrap","剩余时间","刷新时间","最大持续时间","剩余时间秒","每秒郭氏帧","toFixed","层数","当前层数","src","图标","logData","columns","dataIndex","filters","循环模拟技能基础数据","技能名称","text","onFilter","record","日志","includes","日志类型","日志类型数组","indexOf","render","row","其他数据","伤害次数","join","日志时间","footer","dataSource","pagination","pageSize","showTotal","total","总战斗用时","chartData","setChartData","limitRef","useRef","覆盖率","设置覆盖率","setTimeout","initChart","current","chart","Chart","container","autoFit","renderer","padding","tooltip","crosshairs","getDataSource","source","time","tickCount","axis","style","textAlign","fontSize","coordinate","transpose","interval","position","color","offset","获取Buff覆盖率","Buff枚举","格式化buff覆盖数组","id","DOT列表","奇穴信息","最终显示buff列表","res","push","原始Buff数据","当前Dot列表","原始数据","待生效数据","备注","最后一跳","生效时间","当前宠物数据","当前宠物列表","key","数据","入场时间","离场时间","宠物原始数据","宠物基础数据","宠物"],"sourceRoot":""}