{"version":3,"file":"static/js/main~dbe4503b.ae94458c.js","mappings":"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","sources":["功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/CycleSkillItem/BuffItem.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/CycleSkillItem/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/SaveCustomCycleModal/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/ruiyi/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/buff/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/dpsRes/components/BattleLogModal.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/dpsRes/components/SkillCountModal.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/dpsRes/components/BuffCountModal/util.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/dpsRes/components/BuffCountModal/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/dpsRes/index.tsx","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀_悟/components/StatusBar/index.tsx"],"sourcesContent":["import React from 'react'\nimport { 原始Buff数据 } from '../../constant/skill'\n\nfunction BuffItem({ data, ...rest }) {\n  const buff = 原始Buff数据?.[data]\n  return buff ? <img src={buff.图标} {...rest} /> : null\n}\n\nexport default BuffItem\n","// 技能循环显示技能单元\nimport React, { useMemo } from 'react'\nimport { Badge, Space, Tooltip } from 'antd'\nimport { CloseCircleFilled } from '@ant-design/icons'\nimport classNames from 'classnames'\nimport { ShowCycleSingleSkill, 模拟信息类型 } from '../../simulator/type'\nimport { 每秒郭氏帧 } from '../../constant'\nimport BuffItem from './BuffItem'\nimport './index.css'\ninterface CycleSkillItemProps {\n  技能: ShowCycleSingleSkill\n  删除循环技能: (e: number) => void\n  模拟信息: 模拟信息类型\n  buff覆盖数据: number[]\n  更新buff覆盖数据: (e: number[]) => void\n}\n\nfunction CycleSkillItem(props: CycleSkillItemProps) {\n  const { 技能, 删除循环技能, 模拟信息, buff覆盖数据, 更新buff覆盖数据 } = props\n\n  const 技能释放时间 = Math.round(((技能.实际释放时间 || 0) / 每秒郭氏帧) * 100) / 100\n  const 间隔CD = (技能.实际释放时间 || 0) - (技能.计划释放时间 || 0)\n  // 把帧转成秒，保留两位小数\n  const 剩余秒 = Math.round((间隔CD / 每秒郭氏帧) * 100) / 100\n  // 是否异常\n  // 存在异常索引\n  const 索引 = (模拟信息?.循环异常信息?.异常索引 || 0) + -1\n  const 是否异常 = 模拟信息?.循环执行结果 === '异常' ? (技能?.index || 0) >= 索引 : false\n  const 当前异常 = 模拟信息?.循环执行结果 === '异常' ? (技能?.index || 0) === 索引 : false\n\n  const 技能释放结果 = 技能?.技能释放记录结果 || {}\n\n  const 判断有无重要buff标记 = () => {\n    if (技能释放结果?.造成buff数据?.buff名称) {\n      更新buff覆盖数据([\n        技能释放结果?.造成buff数据?.buff开始时间,\n        技能释放结果?.造成buff数据?.buff结束时间,\n      ])\n    }\n  }\n\n  const 卸除重要buff标记 = () => {\n    更新buff覆盖数据([])\n  }\n\n  const 当前是否需要高亮展示在buff覆盖中 = useMemo(() => {\n    if (\n      (技能?.实际释放时间 || 0) <= buff覆盖数据?.[1] &&\n      (技能?.实际释放时间 || 0) >= buff覆盖数据?.[0]\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }, [buff覆盖数据, 技能])\n\n  const cls = classNames(\n    'cycle-simulator-setting-skill',\n    是否异常 ? 'cycle-simulator-setting-skill-error' : '',\n    当前是否需要高亮展示在buff覆盖中 ? 'cycle-simulator-setting-skill-highlight' : ''\n  )\n\n  return (\n    <Badge count={剩余秒} offset={[-52, 8]} className={'cycle-simulator-setting-skill-drag'}>\n      <div className={cls} onMouseEnter={判断有无重要buff标记} onMouseLeave={卸除重要buff标记}>\n        <Tooltip\n          title={\n            <div>\n              <p>{技能?.技能名称}</p>\n              {技能释放结果.实际伤害技能 ? <p>伤害名称：{技能释放结果.实际伤害技能}</p> : null}\n              {技能释放时间 ? <p>释放时间：{技能释放时间}秒</p> : null}\n              {剩余秒 ? <p>释放等待CD：{剩余秒}秒</p> : null}\n              {技能释放结果?.重要buff列表?.length ? (\n                <Space className={'cycle-simulator-setting-buff'} size={[8, 8]} wrap>\n                  {技能释放结果?.重要buff列表.map((item) => {\n                    return (\n                      <BuffItem\n                        data={item}\n                        key={item}\n                        className={'cycle-simulator-setting-buff-item'}\n                      />\n                    )\n                  })}\n                </Space>\n              ) : null}\n              {是否异常 ? (\n                当前异常 ? (\n                  <p>异常：{模拟信息?.循环异常信息?.异常信息?.信息}</p>\n                ) : (\n                  <p>前置技能异常</p>\n                )\n              ) : null}\n            </div>\n          }\n        >\n          <img className={'daozong-cycle-simulator-setting-skill-img'} src={技能?.图标} />\n        </Tooltip>\n        <CloseCircleFilled\n          className={'cycle-simulator-setting-skill-close'}\n          onClick={() => 删除循环技能(技能?.index || 0)}\n        />\n        {技能释放结果?.伤害段数 ? (\n          <span className={`cycle-simulator-setting-skill-count count${技能释放结果?.伤害段数}`}>\n            {技能释放结果?.伤害段数}\n          </span>\n        ) : null}\n      </div>\n    </Badge>\n  )\n}\n\nexport default CycleSkillItem\n","import { Alert, Checkbox, Form, Input, Modal, Select, Tabs } from 'antd'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport './index.css'\nimport { 延迟设定 } from '@/数据/常量'\n\nconst { 计算循环 } = 获取当前数据()\n\ninterface SaveCustomCycleModalProps {\n  自定义循环保存弹窗: boolean\n  设置自定义循环保存弹窗: (e: boolean) => void\n  保存自定义循环: (名称, 加速选项, 延迟选项) => void\n}\n\nfunction SaveCustomCycleModal(props: SaveCustomCycleModalProps) {\n  const { 自定义循环保存弹窗, 设置自定义循环保存弹窗, 保存自定义循环 } = props\n  // 保存类型，覆盖｜新增\n  const [自定义循环类型, 设置自定义循环类型] = useState<string>()\n  // 自定义循环名称保存输入\n  const [自定义循环名称输入, 设置自定义循环名称输入] = useState<string>()\n  // 保存类型，覆盖｜新增\n  const [覆盖循环名, 设置覆盖循环名] = useState<string>()\n  // 保存加速序列\n  const [加速选项, 设置加速选项] = useState<number[]>([0, 1, 2])\n  const [延迟选项, 设置延迟选项] = useState<number[]>([0, 1, 2])\n\n  const 自定义循环 = useAppSelector((state) => state?.data?.自定义循环列表)\n\n  const dispatch = useAppDispatch()\n\n  const 全部循环 = useMemo(() => {\n    return (计算循环 || []).concat(自定义循环)\n  }, [自定义循环, 计算循环])\n\n  useEffect(() => {\n    if (自定义循环保存弹窗) {\n      if (自定义循环?.length) {\n        设置自定义循环类型('覆盖')\n      } else {\n        设置自定义循环类型('新增')\n      }\n    } else {\n      设置自定义循环类型(undefined)\n      设置自定义循环名称输入(undefined)\n      设置覆盖循环名(undefined)\n    }\n  }, [自定义循环保存弹窗, 自定义循环])\n\n  const 保存自定义循环前 = () => {\n    const 名称 = 自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入\n    保存自定义循环(名称, 加速选项, 延迟选项)\n  }\n\n  // 删除自定义循环\n  const 删除循环前提示 = (e, 名称) => {\n    e.stopPropagation()\n    e.preventDefault()\n\n    Modal.confirm({\n      title: `确定要删除循环【${名称}】吗?`,\n      content: '删除后将无法恢复',\n      okText: '我要删除',\n      onOk: async () => {\n        删除循环(名称)\n      },\n    })\n  }\n\n  const 删除循环 = (名称) => {\n    dispatch(更新当前自定义循环列表(自定义循环.filter((item) => item.名称 !== 名称)))\n  }\n\n  return (\n    <Modal\n      centered\n      title='保存自定义循环'\n      okButtonProps={{\n        disabled: !(自定义循环类型 === '覆盖' ? 覆盖循环名 : 自定义循环名称输入),\n      }}\n      open={自定义循环保存弹窗}\n      onCancel={() => 设置自定义循环保存弹窗(false)}\n      onOk={保存自定义循环前}\n      width={630}\n      destroyOnClose\n      className={'cycle-custom-save-modal'}\n    >\n      <Tabs\n        className={'cycle-custom-save-modal-content'}\n        type='card'\n        activeKey={自定义循环类型}\n        onChange={设置自定义循环类型}\n      >\n        <Tabs.TabPane tab={'覆盖'} key='覆盖'>\n          <Select\n            value={覆盖循环名}\n            onChange={设置覆盖循环名}\n            optionLabelProp='label'\n            placeholder={'请选择你要覆盖的循环'}\n          >\n            {自定义循环.map((item) => {\n              return (\n                <Select.Option value={item.名称} key={item.名称} label={item.名称}>\n                  <div className={'cycle-custom-save-label'}>\n                    <span>{item.名称}</span>\n                    <span\n                      onClick={(e) => 删除循环前提示(e, item.名称)}\n                      className={'cycle-custom-save-delete'}\n                    >\n                      删除\n                    </span>\n                  </div>\n                </Select.Option>\n              )\n            })}\n          </Select>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={'新增'} key='新增'>\n          <Form>\n            <Form.Item\n              rules={[\n                {\n                  validator: (_, value, callback) => {\n                    if (value) {\n                      if (全部循环?.some((item) => item?.名称 === value)) {\n                        callback('已存在相同的循环名，请更换')\n                      }\n                    }\n                    callback()\n                  },\n                },\n              ]}\n            >\n              <Input\n                value={自定义循环名称输入}\n                placeholder='请输入自定义循环名称'\n                onChange={(e) => 设置自定义循环名称输入(e?.target?.value)}\n              />\n            </Form.Item>\n          </Form>\n        </Tabs.TabPane>\n      </Tabs>\n      <div className='cycle-custom-save-checkbox'>\n        <p>加速</p>\n        <Checkbox.Group value={加速选项} onChange={(e) => 设置加速选项(e as number[])}>\n          {Array.from({ length: 6 }, (v, i) => i).map((a) => {\n            return (\n              <Checkbox value={a} key={a}>\n                {a}段\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n        <p>延迟</p>\n        <Checkbox.Group value={延迟选项} onChange={(e) => 设置延迟选项(e as number[])}>\n          {延迟设定.map((item) => {\n            return (\n              <Checkbox value={item.value} key={item.value}>\n                {item.label}\n              </Checkbox>\n            )\n          })}\n        </Checkbox.Group>\n      </div>\n      <Alert message={'选项越少保存越快。没选择的选项在外部计算dps时不会进行计算。'} />\n    </Modal>\n  )\n}\n\nexport default SaveCustomCycleModal\n","import React from 'react'\nimport { 角色状态信息类型 } from '../../../simulator/type'\n\nimport { Progress } from 'antd'\nimport './index.css'\n\ninterface RuiyiProps {\n  角色状态信息: 角色状态信息类型\n}\n\nfunction Ruiyi(props: RuiyiProps) {\n  const { 角色状态信息 } = props\n  // console.log('角色状态信息', 角色状态信息)\n\n  const 当前锐意 = 角色状态信息?.锐意 || 0\n  // const 当前锐意 = 60\n\n  return (\n    <div className={'cycle-status-bar-content'}>\n      <div className={'cycle-status-bar-title'}>锐意</div>\n      <div className={'cycle-status-bar-body'}>\n        <Progress\n          className={'cycle-status-bar-ruiyi'}\n          percent={(当前锐意 / 60) * 100}\n          format={(percent) => `${Math.round((+(percent || 0) / 100) * 60)}`}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Ruiyi\n","import React from 'react'\n\nimport { Space, Tooltip } from 'antd'\nimport { Buff枚举 } from '../../../simulator/type'\nimport { 每秒郭氏帧 } from '../../../constant'\nimport './index.css'\n\ninterface BuffProps {\n  title: string\n  buff列表: Buff枚举\n  当前时间点: number\n}\n\nfunction Buff(props: BuffProps) {\n  const { title, buff列表, 当前时间点 } = props\n\n  const 当前buff列表 = Object.keys(buff列表).map((item) => buff列表[item])\n\n  return (\n    <div className={'cycle-status-bar-content cycle-status-bar-buff-content'}>\n      <div className={'cycle-status-bar-title'}>{title}</div>\n      <Space className={'cycle-status-bar-buff-list'} size={[8, 8]} wrap>\n        {当前buff列表?.length ? (\n          当前buff列表.map((item) => {\n            const 应该消失时间 = (item.刷新时间 || 0) + (item.最大持续时间 || 0)\n            const 剩余时间 = 应该消失时间 - 当前时间点 || 0\n            const 剩余时间秒 = (剩余时间 / 每秒郭氏帧).toFixed(1)\n            const 层数 = item.当前层数 || 0\n            return (\n              <div className={'cycle-status-bar-buff'} key={item.名称}>\n                <div className={'cycle-status-bar-buff-item'}>\n                  <Tooltip\n                    title={\n                      item.名称 === '流岚' ? (\n                        <>\n                          {item.名称}\n                          {((层数 - 1) * 20 + 剩余时间 / 每秒郭氏帧).toFixed(1)}秒\n                        </>\n                      ) : (\n                        <>{`${item.名称}${层数 > 1 ? `${层数}层` : ''}`}</>\n                      )\n                    }\n                  >\n                    <img className={'cycle-status-bar-buff-img'} src={item.图标} />\n                  </Tooltip>\n                  {层数 > 1 ? (\n                    <span className={'cycle-status-bar-buff-count'}>{item.当前层数}</span>\n                  ) : null}\n                </div>\n                <p\n                  className={`cycle-status-bar-buff-second ${\n                    剩余时间 < 每秒郭氏帧 * 2 ? 'cycle-status-bar-buff-second-limit' : ''\n                  }`}\n                >\n                  {剩余时间秒}\n                </p>\n              </div>\n            )\n          })\n        ) : (\n          <p className={'cycle-buff-empty'}>无</p>\n        )}\n      </Space>\n    </div>\n  )\n}\n\nexport default Buff\n","import React from 'react'\nimport { Modal, ModalProps, Table } from 'antd'\nimport 循环模拟技能基础数据, { 日志类型数组 } from '../../../../constant/skill'\nimport { 每秒郭氏帧 } from '../../../../constant'\nimport { 循环日志数据类型 } from '../../../../simulator/type'\nimport '../../../../index.css'\n\ninterface BattleLogModalProps extends ModalProps {\n  logData: 循环日志数据类型[]\n}\n\nconst BattleLogModal: React.FC<BattleLogModalProps> = (props) => {\n  const { open, onCancel, logData } = props\n\n  const columns = [\n    {\n      title: '日志',\n      dataIndex: '日志',\n      filters: [...循环模拟技能基础数据, { 技能名称: '流血' }, { 技能名称: '斩浪破锋' }]?.map(\n        (item) => {\n          return {\n            text: item?.技能名称,\n            value: item?.技能名称,\n          }\n        }\n      ),\n      onFilter: (value: any, record) => {\n        return record.日志?.includes(value) || record?.日志类型?.includes(value)\n      },\n    },\n    {\n      title: '日志类型',\n      dataIndex: '日志类型',\n      filters: 日志类型数组?.map((item) => {\n        return {\n          text: item,\n          value: item,\n        }\n      }),\n      onFilter: (value: any, record) => record.日志类型.indexOf(value) === 0,\n    },\n    {\n      title: '伤害次数',\n      dataIndex: '伤害次数',\n      render: (_, row) => {\n        return row?.其他数据?.伤害次数 || ''\n      },\n    },\n    {\n      title: 'buff列表',\n      dataIndex: 'buff列表',\n      render: (_, record) => {\n        return record.日志类型 === '造成伤害' ? (_ || [])?.join(',') || '-' : '-'\n      },\n    },\n    {\n      title: '日志帧',\n      dataIndex: '日志时间',\n      render: (_) => {\n        return _\n      },\n    },\n    {\n      title: '日志秒',\n      dataIndex: '日志秒',\n      render: (_, row) => {\n        return row?.日志时间 / 每秒郭氏帧\n      },\n    },\n    // {\n    //   title: '造成伤害',\n    //   dataIndex: '造成伤害',\n    // },\n    // {\n    //   title: '造成总伤害',\n    //   dataIndex: '造成总伤害',\n    // },\n    // {\n    //   title: '秒伤',\n    //   dataIndex: '秒伤',\n    // },\n  ]\n\n  return (\n    <Modal\n      className='cycle-simulator-modal'\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>战斗日志</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Table\n        dataSource={logData}\n        columns={columns}\n        size='small'\n        pagination={{ pageSize: 100, showTotal: (total) => total }}\n      />\n    </Modal>\n  )\n}\n\nexport default BattleLogModal\n","import React from 'react'\nimport 结果统计 from '@/功能模块/计算结果/结果统计'\nimport { 计算结果技能列表类型 } from '@/@types/输出'\nimport '../../../../index.css'\n\ninterface SkillCountModalProps {\n  open: boolean\n  onCancel: () => void\n  dpsList: 计算结果技能列表类型[]\n  total: number\n}\n\nconst SkillCountModal: React.FC<SkillCountModalProps> = (props) => {\n  const { open, onCancel, total, dpsList } = props\n\n  return (\n    <结果统计\n      计算结果={{\n        总伤: total,\n        计算结果技能列表: dpsList,\n      }}\n      visible={open}\n      onClose={() => onCancel()}\n    />\n  )\n}\n\nexport default SkillCountModal\n","import { 循环日志数据类型 } from '../../../../../simulator/type'\n\nconst 过滤的buff列表 = ['长溯']\n\nexport const 获取Buff覆盖率 = (日志: 循环日志数据类型[], 总战斗用时: number) => {\n  // 以buff个体分类，组成数字数组代表buff持续时间段\n  const Buff枚举: {\n    [key: string]: number[][]\n  } = {}\n  const 覆盖率 = {}\n\n  // 遍历日志塞入数组\n  for (let i = 0; i < 日志.length; i++) {\n    if (\n      (日志[i]?.日志类型 === '目标buff变动' || 日志[i]?.日志类型 === '自身buff变动') &&\n      (日志[i]?.日志?.includes('获得') || 日志[i]?.日志?.includes('失去'))\n    ) {\n      // 当前buff信息\n      const logName = 日志[i]?.日志\n      const type = logName?.includes('获得') ? 'get' : 'lose'\n      const buffName = type === 'get' ? logName?.split('获得')?.[1] : logName?.split('失去')?.[1]\n      const currentTime: number = 日志[i]?.日志时间 || 0\n      if (buffName && !过滤的buff列表?.includes(buffName)) {\n        if (type === 'get') {\n          if (Buff枚举?.[buffName]) {\n            // 判断当前最后一个数组的长度，如果为1代表还没结束，不处理。为2再塞入新的起始时间\n            if (Buff枚举[buffName][Buff枚举[buffName].length - 1]?.length > 1) {\n              Buff枚举[buffName].push([currentTime])\n            }\n          } else {\n            Buff枚举[buffName] = [[currentTime]]\n          }\n        } else if (type === 'lose') {\n          if (Buff枚举?.[buffName]) {\n            if (Buff枚举?.[buffName]?.[Buff枚举?.[buffName]?.length - 1]) {\n              Buff枚举[buffName][Buff枚举[buffName].length - 1].push(currentTime)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // 循环结束，对没有结束时间的buff做补充，塞入总战斗用时作为结束时间\n  // 同时，计算各buff的覆盖率\n  Object.keys(Buff枚举).forEach((key) => {\n    if (Buff枚举[key]?.length) {\n      if (\n        Buff枚举[key]?.[Buff枚举[key]?.length - 1] &&\n        Buff枚举[key]?.[Buff枚举[key]?.length - 1]?.length < 2\n      ) {\n        Buff枚举[key][Buff枚举[key].length - 1].push(总战斗用时)\n      }\n\n      let 总持续时间 = 0\n      for (let i = 0; i < Buff枚举[key].length; i++) {\n        if (Buff枚举[key][i] && Buff枚举[key][i].length === 2) {\n          总持续时间 = 总持续时间 + Buff枚举[key][i][1] - Buff枚举[key][i][0]\n        }\n      }\n      覆盖率[key] = ((总持续时间 / 总战斗用时) * 100)?.toFixed(3)\n    }\n  })\n\n  return {\n    Buff枚举,\n    覆盖率,\n  }\n}\n\nexport const 格式化buff覆盖数组 = (Buff枚举) => {\n  const res: any[] = []\n  Object.keys(Buff枚举).forEach((key) => {\n    if (Buff枚举[key]?.length) {\n      Buff枚举[key].forEach((range) => {\n        res.push({ type: key, range: range })\n      })\n    }\n  })\n  return res\n}\n","import { Modal, ModalProps, Space } from 'antd'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Chart } from '@antv/g2'\nimport { 循环日志数据类型 } from '../../../../../simulator/type'\nimport './index.css'\nimport { 格式化buff覆盖数组, 获取Buff覆盖率 } from './util'\n\ninterface BuffCountModalProps extends ModalProps {\n  open: boolean\n  onCancel: () => void\n  日志: 循环日志数据类型[]\n  总战斗用时: number // 总战斗用时\n}\n\nfunction BuffCountModal(props: BuffCountModalProps) {\n  const { open, onCancel, 日志, 总战斗用时 } = props\n  const [chartData, setChartData] = useState<any>()\n  const limitRef: any = useRef<any>()\n  const [覆盖率, 设置覆盖率] = useState<any>({})\n\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => {\n        initChart()\n      }, 20)\n    }\n    if (open) {\n      limitRef.current = false\n    } else {\n      limitRef.current = false\n      设置覆盖率({})\n      setChartData(undefined)\n    }\n  }, [open, 日志, 总战斗用时])\n\n  const initChart = () => {\n    if (limitRef.current) {\n      return\n    }\n    limitRef.current = true\n\n    const chart = chartData\n      ? chartData\n      : new Chart({\n          container: 'cycle-buff-count-chart',\n          autoFit: true,\n          renderer: 'canvas',\n          padding: [24, 120, 100, 120],\n        })\n\n    chart.tooltip({\n      crosshairs: false,\n    })\n\n    if (!chartData) {\n      setChartData(chart)\n    }\n\n    const dataSource = getDataSource()\n\n    chart.source(dataSource, {\n      time: {\n        tickCount: 10,\n      },\n    })\n    chart.axis('time', {\n      label: {\n        style: {\n          textAlign: 'center', // 文本对齐方向，可取值为： start middle end\n          fontSize: 16, // 文本大小\n        },\n      },\n    })\n\n    const data = getDataSource()\n\n    chart.data(data)\n    chart.coordinate().transpose()\n    chart.interval().position('type*range').color('type').label('range', { offset: 10 })\n    // .color(DOMAIN_COLOR)\n    chart.render()\n    // setLoading(false)\n\n    setTimeout(() => {\n      limitRef.current = false\n    }, 10)\n  }\n\n  const getDataSource = () => {\n    const { Buff枚举, 覆盖率 } = 获取Buff覆盖率(日志, 总战斗用时)\n    设置覆盖率(覆盖率)\n    return 格式化buff覆盖数组(Buff枚举)\n  }\n\n  return (\n    <Modal\n      open={open}\n      onCancel={onCancel}\n      title={\n        <div className={'cycle-simulator-modal-header'}>\n          <h1 className={'cycle-simulator-modal-title'}>Buff覆盖情况（时间单位：帧）</h1>\n        </div>\n      }\n      width={'80%'}\n      centered\n      footer={false}\n    >\n      <Space className='cycle-buff-count-text' size={[16, 16]} wrap>\n        {Object.keys(覆盖率).map((item) => {\n          return (\n            <div key={item} className={'cycle-buff-count-text-wrap'}>\n              <span className='cycle-buff-count-text-label'>{item}：</span>\n              <span className='cycle-buff-count-text-value'>{覆盖率[item]}%</span>\n            </div>\n          )\n        })}\n      </Space>\n      {open ? <div id='cycle-buff-count-chart' className={'cycle-buff-count-chart'} /> : null}\n    </Modal>\n  )\n}\n\nexport default BuffCountModal\n","import React, { useState } from 'react'\nimport { Alert, Tooltip } from 'antd'\nimport { PieChartOutlined, CalendarOutlined, AlignLeftOutlined } from '@ant-design/icons'\nimport { 当前计算结果类型 } from '@/@types/输出'\n\nimport { 循环日志数据类型, 模拟信息类型 } from '../../../simulator/type'\n// import DpsResModal from './components/DpsResModal'\nimport BattleLogModal from './components/BattleLogModal'\nimport SkillCountModal from './components/SkillCountModal'\nimport BuffCountModal from './components/BuffCountModal'\nimport './index.css'\n\ninterface DpsResProps {\n  日志信息: 循环日志数据类型[]\n  模拟信息: 模拟信息类型\n  模拟DPS结果: 当前计算结果类型\n}\n\nfunction DpsRes(props: DpsResProps) {\n  const { 模拟信息, 日志信息, 模拟DPS结果 } = props\n\n  // dps曲线\n  // const [dpsModal, setDpsModal] = useState<boolean>(false)\n\n  // buff分析\n  const [buffCountModalOpen, setBuffCountModalOpen] = useState<boolean>(false)\n  // 日志log\n  const [logModalOpen, setLogModalOpen] = useState<boolean>(false)\n  // 技能统计\n  const [countModal, setCountModal] = useState<boolean>(false)\n\n  // const 开发中 = () => {\n  //   message.success('功能开发中，敬请期待')\n  // }\n\n  return (\n    <div\n      className={`cycle-bar-dps-res ${\n        模拟信息?.循环执行结果 === '异常' ? 'cycle-bar-dps-res-error' : ''\n      }`}\n    >\n      {模拟信息?.循环执行结果 === '异常' ? (\n        <div className={'cycle-dps-res-error'}>\n          <h1 className={'cycle-dps-res-error-title'}>循环异常</h1>\n          <Alert\n            type='error'\n            showIcon\n            message={`异常信息：${模拟信息?.循环异常信息?.异常信息?.信息}`}\n          />\n        </div>\n      ) : 模拟DPS结果?.秒伤 ? (\n        <div className={'cycle-dps-res-success'}>\n          <div className={'cycle-dps-res-success-content'}>\n            <h1 className={'cycle-dps-res-num'}>{模拟DPS结果?.秒伤}</h1>\n            <div className={'cycle-dps-res-success-text-content'}>\n              <div>\n                <span className={'cycle-dps-res-success-text'}>战斗用时</span>\n                <span className={'cycle-dps-res-success-text cycle-dps-res-success-highlight'}>\n                  {模拟DPS结果?.秒伤计算时间}秒\n                </span>\n              </div>\n              <div className={'cycle-dps-res-icons'}>\n                <Tooltip title='Buff分析' placement='left'>\n                  <PieChartOutlined\n                    className={'cycle-dps-res-icon'}\n                    onClick={() => setBuffCountModalOpen(true)}\n                  />\n                </Tooltip>\n                <Tooltip title='战斗日志' placement='left'>\n                  <CalendarOutlined\n                    className={'cycle-dps-res-icon'}\n                    onClick={() => setLogModalOpen(true)}\n                  />\n                </Tooltip>\n                <Tooltip title='技能统计' placement='left'>\n                  <AlignLeftOutlined\n                    className={'cycle-dps-res-icon'}\n                    onClick={() => setCountModal(true)}\n                  />\n                </Tooltip>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n      {/* dps结果 */}\n      {/* <DpsResModal open={dpsModal} onCancel={() => setDpsModal(false)} logData={日志信息} /> */}\n      {/* 战斗日志 */}\n      <BattleLogModal\n        open={logModalOpen}\n        onCancel={() => setLogModalOpen(false)}\n        logData={日志信息}\n      />\n      {/* 技能统计 */}\n      <SkillCountModal\n        open={countModal}\n        onCancel={() => setCountModal(false)}\n        dpsList={模拟DPS结果?.计算结果技能列表}\n        total={模拟DPS结果?.总伤}\n      />\n      {/* Buff分析 */}\n      {buffCountModalOpen && (\n        <BuffCountModal\n          open={buffCountModalOpen}\n          onCancel={() => setBuffCountModalOpen(false)}\n          日志={日志信息}\n          总战斗用时={模拟信息?.当前时间}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default DpsRes\n","// 当前角色状态栏，只用来展示\nimport React from 'react'\nimport { 当前计算结果类型 } from '@/@types/输出'\nimport { 循环日志数据类型, ShowCycleSingleSkill, 模拟信息类型 } from '../../simulator/type'\n\nimport Ruiyi from './ruiyi'\nimport Buff from './buff'\nimport DpsRes from './dpsRes'\nimport './index.css'\n\ninterface StatusBarProps {\n  模拟信息: 模拟信息类型\n  完整循环: ShowCycleSingleSkill[]\n  日志信息: 循环日志数据类型[]\n  模拟DPS结果: 当前计算结果类型\n}\n\nfunction StatusBar(props: StatusBarProps) {\n  const { 模拟信息, 日志信息, 模拟DPS结果 } = props\n\n  return (\n    <div className={'cycle-status-bar'}>\n      <Ruiyi 角色状态信息={模拟信息?.角色状态信息} />\n      <Buff\n        title='自身Buff'\n        buff列表={模拟信息?.当前自身buff列表}\n        当前时间点={模拟信息?.当前时间}\n      />\n      <Buff\n        title='目标Buff'\n        buff列表={模拟信息?.当前目标buff列表}\n        当前时间点={模拟信息?.当前时间}\n      />\n      <DpsRes 模拟信息={模拟信息} 日志信息={日志信息} 模拟DPS结果={模拟DPS结果} />\n    </div>\n  )\n}\n\nexport default StatusBar\n"],"names":["data","rest","buff","原始Buff数据","src","图标","props","技能","删除循环技能","模拟信息","buff覆盖数据","更新buff覆盖数据","技能释放时间","Math","round","实际释放时间","每秒郭氏帧","间隔CD","计划释放时间","剩余秒","索引","循环异常信息","异常索引","是否异常","循环执行结果","index","当前异常","技能释放结果","技能释放记录结果","当前是否需要高亮展示在buff覆盖中","useMemo","cls","classNames","count","offset","className","onMouseEnter","造成buff数据","buff名称","buff开始时间","buff结束时间","onMouseLeave","title","技能名称","实际伤害技能","重要buff列表","length","size","wrap","map","item","异常信息","信息","CloseCircleFilled","onClick","伤害段数","计算循环","获取当前数据","自定义循环保存弹窗","设置自定义循环保存弹窗","保存自定义循环","useState","自定义循环类型","设置自定义循环类型","自定义循环名称输入","设置自定义循环名称输入","覆盖循环名","设置覆盖循环名","加速选项","设置加速选项","延迟选项","设置延迟选项","自定义循环","useAppSelector","state","自定义循环列表","dispatch","useAppDispatch","全部循环","concat","useEffect","undefined","删除循环","名称","更新当前自定义循环列表","filter","centered","okButtonProps","disabled","open","onCancel","onOk","width","destroyOnClose","type","activeKey","onChange","tab","value","optionLabelProp","placeholder","label","e","stopPropagation","preventDefault","Modal","content","okText","删除循环前提示","rules","validator","_","callback","some","target","Array","from","v","i","a","延迟设定","message","角色状态信息","当前锐意","锐意","percent","format","buff列表","当前时间点","当前buff列表","Object","keys","剩余时间","刷新时间","最大持续时间","剩余时间秒","toFixed","层数","当前层数","logData","columns","dataIndex","filters","循环模拟技能基础数据","text","onFilter","record","日志","includes","日志类型","日志类型数组","indexOf","render","row","其他数据","伤害次数","join","日志时间","footer","dataSource","pagination","pageSize","showTotal","total","dpsList","总伤","计算结果技能列表","visible","onClose","过滤的buff列表","总战斗用时","chartData","setChartData","limitRef","useRef","覆盖率","设置覆盖率","setTimeout","initChart","current","chart","Chart","container","autoFit","renderer","padding","tooltip","crosshairs","getDataSource","source","time","tickCount","axis","style","textAlign","fontSize","coordinate","transpose","interval","position","color","Buff枚举","logName","buffName","split","currentTime","push","forEach","key","总持续时间","获取Buff覆盖率","res","range","格式化buff覆盖数组","id","日志信息","模拟DPS结果","buffCountModalOpen","setBuffCountModalOpen","logModalOpen","setLogModalOpen","countModal","setCountModal","showIcon","秒伤","秒伤计算时间","placement","PieChartOutlined","CalendarOutlined","AlignLeftOutlined","当前时间","当前自身buff列表","当前目标buff列表"],"sourceRoot":""}