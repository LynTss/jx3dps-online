{"version":3,"file":"static/js/main~f2af5b2d.c478c9a5.js","mappings":"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","sources":["功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/simulator/DOT类/截辕/index.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/simulator/DOT类/斩浪破锋/index.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/simulator/DOT类/流血/index.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/simulator/通用类/有CD技能通用类.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/孤锋诀/simulator/通用类/通用DOT类.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/simulator/通用类/通用DOT类.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/simulator/DOT类/贯穿/index.ts","功能模块/基础设置/公用设置/循环模拟/心法循环模拟/山海心诀/simulator/通用类/有CD技能通用类.ts"],"sourcesContent":["// import 循环主类 from '../main'\nimport 通用DOT类 from '../../通用类/通用DOT类'\n\nclass 截辕 extends 通用DOT类 {\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获得和刷新截辕() {\n    const 当前截辕层数 = this.模拟循环.当前目标buff列表?.['截辕']?.当前层数 || 0\n    this.模拟循环.添加buff?.({\n      名称: '截辕',\n      对象: '目标',\n      新增层数: 1,\n    })\n    const 数据 = this.获取当前DOT数据('截辕')\n    this.更新待生效数据(当前截辕层数, 数据)\n  }\n\n  结算截辕伤害() {\n    const 待生效数据 = this.结算并更新运行数据()\n\n    待生效数据.forEach((数据) => {\n      const 生效时间 = 数据.生效时间 || 0\n      const 快照buff列表 = 数据.快照buff列表 || []\n\n      if (生效时间) {\n        this.触发伤害行为('截辕（DOT）', 1, 快照buff列表, 生效时间, true)\n      }\n    })\n  }\n}\n\nexport default 截辕\n\nexport const 截辕DOT类型 = typeof 截辕\n","// import 循环主类 from '../main'\nimport 通用DOT类 from '../../通用类/通用DOT类'\n\nclass 斩浪破锋 extends 通用DOT类 {\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获得和刷新斩浪破锋() {\n    const 当前斩浪破锋层数 = this.模拟循环.当前目标buff列表?.['斩浪破锋']?.当前层数 || 0\n    const 斩浪破锋最大层数 = this?.模拟循环?.Buff和Dot数据?.斩浪破锋?.最大层数 || 3\n    const 斩浪破锋层数 = Math.min(当前斩浪破锋层数 + 1, 斩浪破锋最大层数)\n\n    this.模拟循环.添加buff?.({\n      名称: '斩浪破锋',\n      对象: '目标',\n      新增层数: 1,\n    })\n    const 数据 = this.获取当前DOT数据('斩浪破锋')\n    this.更新待生效数据(斩浪破锋层数, 数据)\n  }\n\n  结算斩浪破锋伤害() {\n    const 待生效数据 = this.结算并更新运行数据()\n\n    待生效数据.forEach((数据) => {\n      const 层数 = 数据.当前层数 || 1\n      const 生效时间 = 数据.生效时间 || 0\n      const 快照buff列表 = 数据.快照buff列表 || []\n\n      if (生效时间) {\n        this.触发伤害行为(斩浪破锋伤害名称枚举[层数], 1, 快照buff列表, 生效时间, true)\n      }\n    })\n  }\n}\n\nexport default 斩浪破锋\n\nexport const 斩浪破锋DOT类型 = typeof 斩浪破锋\n\nconst 斩浪破锋伤害名称枚举 = {\n  1: '斩浪破锋·一',\n  2: '斩浪破锋·二',\n  3: '斩浪破锋·三',\n}\n","// import 循环主类 from '../main'\nimport 通用DOT类 from '../../通用类/通用DOT类'\n\nclass 流血 extends 通用DOT类 {\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获得和刷新流血() {\n    const 当前破绽层数 = this.模拟循环.当前目标buff列表?.['破绽']?.当前层数 || 0\n    const 当前流血层数 = this.模拟循环.当前目标buff列表?.['流血']?.当前层数 || 0\n    const 流血最大层数 = this?.模拟循环?.Buff和Dot数据?.流血?.最大层数 || 4\n    const 新流血层数 = Math.min(当前流血层数 + 当前破绽层数, 流血最大层数)\n    if (当前破绽层数) {\n      this.模拟循环.添加buff?.({\n        名称: '流血',\n        对象: '目标',\n        新增层数: 当前破绽层数,\n      })\n    }\n    const 数据 = this.获取当前DOT数据('流血')\n    this.更新待生效数据(新流血层数, 数据)\n  }\n\n  结算流血伤害() {\n    const 待生效数据 = this.结算并更新运行数据()\n\n    待生效数据.forEach((数据) => {\n      const 层数 = 数据.当前层数 || 1\n      const 生效时间 = 数据.生效时间 || 0\n      const 快照buff列表 = 数据.快照buff列表 || []\n      if (生效时间) {\n        this.触发伤害行为(流血伤害名称枚举[层数], 1, 快照buff列表, 生效时间, true)\n      }\n    })\n  }\n}\n\nexport default 流血\n\nexport const 流血DOT类型 = typeof 流血\n\nconst 流血伤害名称枚举 = {\n  1: '流血·一',\n  2: '流血·二',\n  3: '流血·三',\n  4: '流血·四',\n  5: '流血·五',\n  6: '流血·六',\n}\n","import { 技能运行数据类型 } from '../type'\nimport 技能统一类 from './技能统一类'\n\nclass 有CD技能通用类 extends 技能统一类 {\n  技能运行数据: 技能运行数据类型 = {\n    当前层数: -999,\n  }\n\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  初始化技能运行数据(技能) {\n    if (this.技能运行数据.当前层数 === -999) {\n      this.技能运行数据.当前层数 = 技能?.最大充能层数 || 1\n    }\n  }\n\n  更新技能运行数据(新数据) {\n    this.技能运行数据 = {\n      ...this.技能运行数据,\n      ...新数据,\n    }\n  }\n}\n\nexport default 有CD技能通用类\n","import { 根据加速等级获取虚拟加速值, 获取实际帧数 } from '../../../山海心诀/utils'\nimport { DOT待生效数据类型, DOT运行数据类型, DotDTO } from '../type'\nimport 技能统一类 from './技能统一类'\n\nclass 通用DOT类 extends 技能统一类 {\n  DOT运行数据: DOT运行数据类型 = {\n    待生效数据: [],\n  }\n\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获取当前DOT数据(DOT名称) {\n    const DOT数据: DotDTO = this.模拟循环.Buff和Dot数据?.[DOT名称] as DotDTO\n    return DOT数据\n  }\n\n  更新DOT运行数据(新数据) {\n    this.DOT运行数据 = {\n      ...this.DOT运行数据,\n      ...新数据,\n    }\n  }\n\n  结算并更新运行数据() {\n    const 待生效数据 = this.DOT运行数据?.待生效数据 || []\n    if (待生效数据.length > 0) {\n      const 结算数组: DOT待生效数据类型[] = []\n      const 未结算数组: DOT待生效数据类型[] = []\n      const 当前时间 = this.模拟循环.当前时间 || 0\n      待生效数据.forEach((数据) => {\n        if ((数据.生效时间 || 0) <= 当前时间) {\n          结算数组.push(数据)\n        } else {\n          未结算数组.push(数据)\n        }\n      })\n      this.更新DOT运行数据({\n        待生效数据: 未结算数组,\n      })\n      return 结算数组\n    }\n    return []\n  }\n\n  // 对当前dot进行结算和运行数据\n  更新待生效数据(当前层数: number, DOT数据: DotDTO) {\n    const DOT是否吃加速 = DOT数据.是否吃加速 !== undefined ? DOT数据.是否吃加速 : true\n\n    const 循环加速值 = 根据加速等级获取虚拟加速值(this.模拟循环.加速等级)\n    const 实际初次频率 = DOT是否吃加速\n      ? 获取实际帧数(DOT数据.初次频率 || DOT数据.伤害频率, 循环加速值)\n      : DOT数据.初次频率 || DOT数据.伤害频率\n\n    const 实际伤害频率 = DOT是否吃加速\n      ? 获取实际帧数(DOT数据.伤害频率, 循环加速值)\n      : DOT数据.伤害频率\n\n    const 当前时间 = this.模拟循环.当前时间 || 0\n    const 当前是否有灭影追风Buff = !!this.模拟循环?.当前自身buff列表?.['灭影追风']?.当前层数\n    const 待生效数据: DOT待生效数据类型[] =\n      this.DOT运行数据?.待生效数据.map((item) => {\n        return { ...item, 当前层数, 快照buff列表: 当前是否有灭影追风Buff ? ['灭影追风_双会'] : [] }\n      }) || []\n\n    // 如果DOT依然存在\n    if (待生效数据?.length > 0) {\n      const 待添加次数 = DOT数据.最大作用次数 - 待生效数据?.length\n      const 原最后一次生效时间 = 待生效数据[待生效数据?.length - 1]?.生效时间 || 0\n      for (let i = 0; i < 待添加次数; i++) {\n        待生效数据.push({\n          当前层数,\n          生效时间: 原最后一次生效时间 + 实际伤害频率 * (i + 1),\n          快照buff列表: 当前是否有灭影追风Buff ? ['灭影追风_双会'] : [],\n        })\n      }\n    } else {\n      const 待添加次数 = DOT数据.最大作用次数\n      for (let i = 0; i < 待添加次数; i++) {\n        const 生效时间 = 当前时间 + (i === 0 ? 实际初次频率 : 实际伤害频率 * (i + 1))\n        待生效数据.push({\n          当前层数,\n          生效时间,\n          快照buff列表: 当前是否有灭影追风Buff ? ['灭影追风_双会'] : [],\n        })\n      }\n    }\n    this.更新DOT运行数据({\n      待生效数据: 待生效数据,\n    })\n  }\n}\n\nexport default 通用DOT类\n","import { 获取实际帧数 } from '../../utils'\nimport { DOT待生效数据类型, DOT运行数据类型, DotDTO } from '../type'\nimport { 根据加速等级获取虚拟加速值 } from '../utils'\nimport 技能统一类 from './技能统一类'\n\nclass 通用DOT类 extends 技能统一类 {\n  DOT运行数据: DOT运行数据类型 = {\n    待生效数据: [],\n  }\n\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获取当前DOT数据(DOT名称) {\n    const DOT数据: DotDTO = this.模拟循环.Buff和Dot数据?.[DOT名称] as DotDTO\n    return DOT数据\n  }\n\n  更新DOT运行数据(新数据) {\n    this.DOT运行数据 = {\n      ...this.DOT运行数据,\n      ...新数据,\n    }\n  }\n\n  结算并更新运行数据(事件时间 = this.模拟循环.当前时间) {\n    const 待生效数据 = this.DOT运行数据?.待生效数据 || []\n    if (待生效数据.length > 0) {\n      const 结算数组: DOT待生效数据类型[] = []\n      const 未结算数组: DOT待生效数据类型[] = []\n      const 当前时间 = 事件时间 || this.模拟循环.当前时间 || 0\n      待生效数据.forEach((数据) => {\n        // 将dot结算放在触发上DOT、引爆等行为之后。所以当前时间的dot不结算。放在下一次时间结算\n        if ((数据.生效时间 || 0) < 当前时间) {\n          结算数组.push(数据)\n        } else {\n          未结算数组.push(数据)\n        }\n      })\n      this.更新DOT运行数据({\n        待生效数据: 未结算数组,\n      })\n      return {\n        结算数组,\n        未结算数组,\n      }\n    } else {\n      return {\n        结算数组: [],\n        未结算数组: [],\n      }\n    }\n  }\n\n  // 对当前dot进行结算和运行数据\n  更新待生效数据(当前层数: number, DOT数据: DotDTO) {\n    const DOT是否吃加速 = DOT数据.是否吃加速 !== undefined ? DOT数据.是否吃加速 : true\n\n    const 循环加速值 = 根据加速等级获取虚拟加速值(this.模拟循环.加速等级)\n    const 实际初次频率 = DOT是否吃加速\n      ? 获取实际帧数(DOT数据.初次频率 || DOT数据.伤害频率, 循环加速值)\n      : DOT数据.初次频率 || DOT数据.伤害频率\n\n    const 实际伤害频率 = DOT是否吃加速\n      ? 获取实际帧数(DOT数据.伤害频率, 循环加速值)\n      : DOT数据.伤害频率\n\n    const 当前时间 = this.模拟循环.当前时间 || 0\n    const 待生效数据: DOT待生效数据类型[] =\n      // 只更新在刷新buff之后的数据的层数\n      this.DOT运行数据?.待生效数据.map((item) => {\n        if ((item.生效时间 || 0) < this.模拟循环.当前时间) {\n          return item\n        } else {\n          return { ...item, 当前层数 }\n        }\n      }) || []\n\n    // 如果DOT依然存在\n    if (待生效数据?.length > 0) {\n      const 待添加次数 = DOT数据.最大作用次数 - 待生效数据?.length\n      const 原最后一次生效时间 = 待生效数据[待生效数据?.length - 1]?.生效时间 || 0\n      for (let i = 0; i < 待添加次数; i++) {\n        待生效数据.push({\n          当前层数,\n          生效时间: 原最后一次生效时间 + 实际伤害频率 * (i + 1),\n        })\n      }\n    } else {\n      const 待添加次数 = DOT数据.最大作用次数\n      for (let i = 0; i < 待添加次数; i++) {\n        const 生效时间 = 当前时间 + (i === 0 ? 实际初次频率 : 实际伤害频率 * (i + 1))\n        待生效数据.push({\n          当前层数,\n          生效时间,\n        })\n      }\n    }\n    // this.模拟循环.删除待生效事件队列(`卸除buff-${DOT数据?.名称}`)\n\n    this.更新DOT运行数据({\n      待生效数据: 待生效数据,\n    })\n\n    // 每次刷新和更新时，删除前面的待生效数据\n    this.模拟循环.添加待生效事件队列(\n      [\n        {\n          事件名称: `卸除buff-${DOT数据?.名称}`,\n          事件时间: 待生效数据?.[待生效数据.length - 1]?.生效时间 || 0,\n          事件备注: { buff名称: DOT数据?.名称, buff对象: '目标', 卸除层数: 9999 },\n        },\n      ],\n      true\n    )\n  }\n}\n\nexport default 通用DOT类\n","import 通用DOT类 from '../../通用类/通用DOT类'\n\nclass 贯穿 extends 通用DOT类 {\n  static 审固触发次数 = 0\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  获得和刷新贯穿(来源?) {\n    const 审固 = this.模拟循环.校验奇穴是否存在('审固')\n    // const 贯穿buff数据 = this.模拟循环.当前目标buff列表?.['贯穿']\n    const 当前最后一跳贯穿数据 =\n      this?.DOT运行数据?.待生效数据?.[this?.DOT运行数据?.待生效数据?.length - 1] || {}\n    const 当前贯穿层数 = 当前最后一跳贯穿数据?.当前层数 || 0\n    const 贯穿最大层数 = this?.模拟循环?.Buff和Dot数据?.贯穿?.最大层数 || 6\n    const 新贯穿层数 = Math.min(当前贯穿层数 + 1, 贯穿最大层数)\n    const 原始数据 = this.获取当前DOT数据('贯穿')\n    const 贯穿待生效数据 = [...this.DOT运行数据.待生效数据]\n\n    const 贯穿刷新 = () => {\n      this.模拟循环.添加buff?.({\n        名称: '贯穿',\n        对象: '目标',\n        新增层数: 1,\n        只添加日志: true,\n      })\n      this.更新待生效数据(新贯穿层数, 原始数据)\n    }\n\n    if (审固) {\n      if (当前贯穿层数 === 6 && 贯穿待生效数据 && 贯穿.审固触发次数 < 3) {\n        // 增加审固次数\n        贯穿.审固触发次数 = 贯穿.审固触发次数 + 1\n        // 更新dot序列\n        const 原最后一次生效时间 = 贯穿待生效数据[贯穿待生效数据?.length - 1]?.生效时间 || 0\n        // 审固延长2秒等于延长4跳\n        for (let i = 0; i < 4; i++) {\n          贯穿待生效数据.push({\n            当前层数: 新贯穿层数,\n            生效时间: 原最后一次生效时间 + 原始数据.伤害频率 * (i + 1),\n          })\n        }\n        this.更新DOT运行数据({\n          待生效数据: [...(贯穿待生效数据 || [])],\n        })\n        // 添加审固日志\n        this.模拟循环.添加战斗日志({\n          日志: `触发审固，贯穿延长2秒，本次贯穿已触发${贯穿.审固触发次数}次`,\n          日志类型: '自身buff变动',\n          日志时间: this.模拟循环.当前时间,\n        })\n      } else if ((当前贯穿层数 || 0) < 6) {\n        贯穿刷新()\n        贯穿.审固触发次数 = 0\n      }\n    } else {\n      贯穿刷新()\n    }\n    if (来源) {\n      this.模拟循环.添加战斗日志?.({\n        日志: `${来源}`,\n        日志类型: '上贯穿',\n        日志时间: this.模拟循环.当前时间,\n      })\n    }\n  }\n\n  结算贯穿伤害(事件时间 = this.模拟循环.当前时间) {\n    const { 结算数组: 待生效数据 } = this.结算并更新运行数据(事件时间)\n    待生效数据.forEach((数据) => {\n      const 层数 = 数据.当前层数 || 1\n      const 生效时间 = 数据.生效时间 || 0\n      if (生效时间) {\n        this.触发伤害行为(`贯穿·${[层数]}`, 1, [], 生效时间)\n      }\n    })\n  }\n\n  引爆贯穿逻辑(来源, 类型: '棘矢' | '于狩') {\n    // 获取当前剩余的贯穿\n    let 待生效数据 = [...this.DOT运行数据.待生效数据] || []\n    this.模拟循环.添加战斗日志({\n      日志: `${来源}`,\n      日志类型: `${类型}引爆贯穿`,\n      日志时间: this.模拟循环.当前时间,\n    })\n    if (待生效数据?.length) {\n      const 引爆跳数 = Math.min(待生效数据?.length, 3)\n      const 当前贯穿层数 = 待生效数据[待生效数据?.length - 1]?.当前层数 || 0\n      this.模拟循环.添加战斗日志({\n        日志: `贯穿【${当前贯穿层数}】- 引爆【${引爆跳数}】跳`,\n        日志类型: '技能释放结果',\n        日志时间: this.模拟循环.当前时间,\n      })\n      this.模拟循环.技能造成伤害(`贯穿·${当前贯穿层数 * 引爆跳数}`, 1, [], this.模拟循环.当前时间)\n      // 引爆贯穿，减少3跳\n      if (待生效数据.length > 3) {\n        待生效数据.splice(待生效数据.length - 3)\n      } else {\n        待生效数据 = []\n        this.模拟循环.卸除buff({ 名称: '贯穿', 卸除层数: 6, 只添加日志: true })\n      }\n      // }\n      this.更新DOT运行数据({\n        待生效数据: [...(待生效数据 || [])],\n      })\n    } else {\n      this.模拟循环.添加战斗日志({\n        日志: `${来源}触发【${类型}】失败，当前无可引爆贯穿`,\n        日志类型: '技能释放结果',\n        日志时间: this.模拟循环.当前时间,\n      })\n    }\n  }\n}\n\nexport default 贯穿\n\nexport const 贯穿DOT类型 = typeof 贯穿\n","import { 技能运行数据类型 } from '../type'\nimport 技能统一类 from './技能统一类'\n\nclass 有CD技能通用类 extends 技能统一类 {\n  技能运行数据: 技能运行数据类型 = {\n    当前层数: -999,\n  }\n\n  constructor(模拟循环) {\n    super(模拟循环)\n  }\n\n  初始化技能运行数据(技能) {\n    if (this.技能运行数据.当前层数 === -999) {\n      this.技能运行数据.当前层数 = 技能?.最大充能层数 || 1\n    }\n  }\n\n  更新技能运行数据(新数据) {\n    this.技能运行数据 = {\n      ...this.技能运行数据,\n      ...新数据,\n    }\n  }\n}\n\nexport default 有CD技能通用类\n"],"names":["截辕","模拟循环","当前截辕层数","this","当前目标buff列表","当前层数","添加buff","名称","对象","新增层数","数据","获取当前DOT数据","更新待生效数据","结算并更新运行数据","forEach","生效时间","快照buff列表","触发伤害行为","通用DOT类","斩浪破锋","当前斩浪破锋层数","斩浪破锋最大层数","Buff和Dot数据","最大层数","斩浪破锋层数","Math","min","层数","斩浪破锋伤害名称枚举","流血","当前破绽层数","当前流血层数","流血最大层数","新流血层数","流血伤害名称枚举","有CD技能通用类","技能运行数据","技能","最大充能层数","新数据","技能统一类","DOT运行数据","待生效数据","DOT名称","length","结算数组","未结算数组","当前时间","push","更新DOT运行数据","DOT数据","DOT是否吃加速","undefined","是否吃加速","循环加速值","根据加速等级获取虚拟加速值","加速等级","实际初次频率","获取实际帧数","初次频率","伤害频率","实际伤害频率","当前是否有灭影追风Buff","当前自身buff列表","map","item","待添加次数","最大作用次数","原最后一次生效时间","i","事件时间","添加待生效事件队列","事件名称","事件备注","buff名称","buff对象","卸除层数","贯穿","来源","审固","校验奇穴是否存在","当前最后一跳贯穿数据","当前贯穿层数","贯穿最大层数","新贯穿层数","原始数据","贯穿待生效数据","贯穿刷新","只添加日志","审固触发次数","添加战斗日志","日志","日志类型","日志时间","类型","引爆跳数","技能造成伤害","splice","卸除buff"],"sourceRoot":""}